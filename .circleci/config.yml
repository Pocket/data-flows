version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@1.2.3

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  # build is currently a dummy job. CircleCI requires a 'build' job to exist,
  # but we don't have a Docker image yet, so don't need to build anything.
  build:
    docker:
      - image: cimg/python:3.9-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      # Define the working directory for this job
#      - attach_workspace:
#          at: /tmp/workspace
#
#      # Copy built files to app_prod folder
#      - run:
#          name: Setup workspace
#          command: |
#            mkdir -p /tmp/workspace/app_prod
#            cp -r . /tmp/workspace/app_prod
#            cp .docker/app/Dockerfile /tmp/workspace/app_prod/
#      # Persist built files to workspace
#      - persist_to_workspace:
#          root: /tmp/workspace
#          paths:
#            - app_prod
workflows:
  all:
    jobs:
      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Dev-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Dev
          codebuild-project-branch: dev

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: ${SERVICE_NAME}-Prod-CodePipeline
          codebuild-project-name: ${SERVICE_NAME}-Prod
          codebuild-project-branch: main

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
