version: 2.1

# Parameters to control monorepo conditionals
parameters:
  aws_changes:
    type: boolean
    default: false
  common_utils_changes:
    type: boolean
    default: false
  data_products_changes:
    type: boolean
    default: false

# Workflow and job shortcuts
only_main_v2: &only_main_v2
  filters:
    branches:
      only:
        - main-v2

not_dev_main_v2: &not_dev_main_v2
  filters:
    branches:
      ignore:
        - dev-v2
        - main-v2

only_dev_v2: &only_dev_v2
  filters:
    branches:
      only:
        - dev-v2

has_aws_changes: &has_aws_changes
  condition: << pipeline.parameters.aws_changes >>

has_common_utils_changes: &has_common_utils_changes
  condition: << pipeline.parameters.common_utils_changes >>

has_data_products_changes: &has_data_products_changes
  condition: << pipeline.parameters.data_products_changes >>

git_checkout: &git_checkout
  checkout:
    path: ~/repo



# Reusable commands for jobs
commands:
  no_op:
    steps:
      - run:
          name: Build Completed
          command: |
            echo "All build steps expected have completed."
  set_poetry_path:
    steps:
      - run:
          name: Set Poetry Path
          command: echo "export PATH=/root/.local/bin:$PATH" >> $BASH_ENV
  install_poetry:
    steps:
      - run:
          name: Install Poetry
          command: |
            apt update
            apt install -y curl
            curl -sSL https://install.python-poetry.org | python3
            apt clean && apt autoremove -y
            rm -rf /var/lib/apt/lists/*
            poetry config virtualenvs.create false
  python_changes_build:
    parameters:
      dependency_groups:
        default: "main,dev"
        type: string
      coverage_path:
        default: src
        type: string
      tests_path:
        default: tests
        type: string
    steps:
      - run:
          command: |
            poetry install --no-ansi --only <<parameters.dependency_groups>>
            black --check .
            python -m pytest --cov=<<parameters.coverage_path>> --cov-report term-missing --cov-fail-under=100 <<parameters.tests_path>>
          name: Python Testing and Validation
  common_utils_wheel_file:
    steps:
      - run:
          command: |
            pushd ~/repo/common-utils
            poetry build -f wheel
            mkdir -p mkdir -p /tmp/common-utils
            cp dist/* /tmp/common-utils
            popd

  prefect_project_build:
    steps:
      - run:
          command: |
            deploy-cli deploy-envs --build-only
            deploy-cli deploy-flows --validate-only
          name: Prefect Project Build
  prefect_project_deploy:
    steps:
      - run:
          command: |
            deploy-cli deploy-envs
            deploy-cli deploy-flows
          name: Prefect Project Deploy
            

# Jobs to be used by workflows
# Use of conditionals allow required checks to pass when build steps are not needed
# Conditionals will the trigger the appropriate steps for the appropriate folders/files
jobs:
  aws_changes_build:
    parameters:
      node_env:
        default: "development"
        type: string
      runner_resource_class:
        default: pocket/default-dev
        type: string
    machine: true
    resource_class: << parameters.runner_resource_class >>
    environment: 
      CDKTF_LOG_LEVEL: DEBUG
      NODE_ENV: << parameters.node_env >>
    steps:
      - when: 
          <<: *has_aws_changes
          steps:
          - checkout:
              path: ~/repo
          - run:
              command: |
                . /home/circleci/.codebuild_shims_wrapper.sh
                nvm install
                npm install
                [[ ${NODE_ENV} == "development" ]] && npm run prettier-check
                [[ ${NODE_ENV} == "development" ]] && npm run lint
                npm run synth
              name: install packages, lint, and create tf template
          - run:
              command: |
                cd cdktf.out/stacks/prefect-v2
                terraform init
                terraform plan
              name: terraform plan
      - no_op
    working_directory: ~/repo/.aws

  aws_changes_deploy:
      parameters:
        node_env:
          default: "development"
          type: string
        runner_resource_class:
          default: pocket/default-dev
          type: string
      machine: true
      resource_class: << parameters.runner_resource_class >>
      environment: 
        CDKTF_LOG_LEVEL: DEBUG
        NODE_ENV: << parameters.node_env >>
      steps:
        - when: 
            <<: *has_aws_changes
            steps:
              - checkout:
                  path: ~/repo
              - run:
                  command: |
                    . /home/circleci/.codebuild_shims_wrapper.sh
                    nvm install
                    npm install
                    npm run synth
                  name: install packages and create tf template
              - run:
                  command: |
                    cd cdktf.out/stacks/prefect-v2
                    terraform init
                    terraform apply -auto-approve
                  name: terraform deploy
        - no_op
      working_directory: ~/repo/.aws
  common_utils_changes_build:
    docker:
      - image: prefecthq/prefect:2-python3.10
    steps:
      - when: 
          <<: *has_common_utils_changes
          steps:
            - <<: *git_checkout
            - set_poetry_path
            - install_poetry
            - python_changes_build
      - no_op
    working_directory: ~/repo/common-utils
  data_products_changes_build:
    docker:
      - image: prefecthq/prefect:2-python3.10
    steps:
      - when: 
          <<: *has_data_products_changes
          steps:
            - <<: *git_checkout
            - common_utils_wheel_file
            - set_poetry_path
            - install_poetry
            - python_changes_build
      - no_op
    working_directory: ~/repo/data-products

workflows:
  aws_changes_workflow:
    jobs: 
      - aws_changes_build:
          <<: *not_dev_main_v2
          context: pocket
          node_env: development
          runner_resource_class: pocket/default-dev
          name: terraform plan dev
      - aws_changes_build:
          <<: *not_dev_main_v2
          context: pocket
          node_env: production
          runner_resource_class: pocket/default-prod
          name: terraform plan production
      - aws_changes_deploy:
          <<: *only_dev_v2
          context: pocket
          node_env: development
          runner_resource_class: pocket/default-dev
          name: terraform apply dev
      - aws_changes_deploy:
          <<: *only_main_v2
          context: pocket
          node_env: production
          runner_resource_class: pocket/default-prod
          name: terraform apply production
  prefect_changes_workflow:
    jobs:
      - common_utils_changes_build:
          <<: *not_dev_main_v2
          name: Common Utils Build
      - data_products_changes_build:
          <<: *not_dev_main_v2
          name: Data Products Project Build
          requires:
            - Common Utils Build

      
  
# VS Code Extension Version: 1.5.1