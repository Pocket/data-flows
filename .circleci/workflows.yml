version: 2.1

# Orbs to use for jobs
orbs:
  aws-cli: circleci/aws-cli@3.1.4

# Parameters to control monorepo conditionals
# Each Prefect project or supplemental folder (.aws) will get its own changes boolean
# This will come from path filtering setup logic in config.yml
parameters:
  aws_changes:
    type: boolean
    default: false
  agent_docker_changes:
    type: boolean
    default: false
  common_utils_changes:
    type: boolean
    default: false
  data_products_changes:
    type: boolean
    default: false
  base_working_directory:
    type: string
    default: /tmp/data-flows-v2/repo

# Branch shortcuts for filtering on workflows
only_main_v2: &only_main_v2
  filters:
    branches:
      only:
        - main-v2

not_dev_main_v2: &not_dev_main_v2
  filters:
    branches:
      ignore:
        - dev-v2
        - main-v2

only_dev_v2: &only_dev_v2
  filters:
    branches:
      only:
        - dev-v2

# Shortcuts for conditionals based on boolean parameters
has_aws_changes: &has_aws_changes
  condition: << pipeline.parameters.aws_changes >>

has_agent_docker_changes: &has_agent_docker_changes
  condition:
    and: 
      - equal:  [ true, << pipeline.parameters.aws_changes >> ]
      - equal:  [ true, << pipeline.parameters.agent_docker_changes >> ]

has_common_utils_changes: &has_common_utils_changes
  condition: << pipeline.parameters.common_utils_changes >>
    


# Reusable commands for jobs
commands:
  git_checkout:
    steps:
      - checkout:
          path: << pipeline.parameters.base_working_directory >>
  no_op:
    steps:
      - run:
          name: Build Completed
          command: |
            echo "All build steps expected have completed."
  set_poetry_path:
    steps:
      - run:
          name: Set Poetry Path
          command: echo "export PATH=/root/.local/bin:$PATH" >> $BASH_ENV
  install_poetry:
    steps:
      - set_poetry_path
      - run:
          name: Install Poetry
          command: |
            apt update
            apt install -y curl
            curl -sSL https://install.python-poetry.org | python3
            apt clean && apt autoremove -y
            rm -rf /var/lib/apt/lists/*
  python_changes_build:
    parameters:
      dependency_groups:
        default: "main,dev"
        type: string
      coverage_path:
        default: src
        type: string
      tests_path:
        default: tests
        type: string
    steps:
      - run:
          command: |
            poetry install --no-ansi --only <<parameters.dependency_groups>>
            black --check .
            poetry run python -m pytest -vvvs --cov=<<parameters.coverage_path>> --cov-report term-missing --cov-fail-under=100 <<parameters.tests_path>>
          name: Python Testing and Validation
  common_utils_wheel_file:
    steps:
      - run:
          command: |
            pushd ${CIRCLE_WORKING_DIRECTORY}/common-utils
            poetry build -f wheel
            mkdir -p mkdir -p /tmp/common-utils
            cp dist/* /tmp/common-utils
            popd

  prefect_project_build:
    steps:
      - run:
          command: |
            deploy-cli deploy-envs --build-only
            deploy-cli deploy-flows --validate-only
          name: Prefect Project Build
  prefect_project_deploy:
    steps:
      - run:
          command: |
            deploy-cli deploy-envs
            deploy-cli deploy-flows
          name: Prefect Project Deploy
            

# Jobs to be used by workflows
# Use of conditionals allow required checks to pass when build steps are not needed
# Conditionals will the trigger the appropriate steps for the appropriate folders/files
jobs:
  aws_changes_build:
    parameters:
      node_env:
        default: "development"
        type: string
      runner_resource_class:
        default: pocket/default-dev
        type: string
    machine: true
    resource_class: << parameters.runner_resource_class >>
    environment: 
      CDKTF_LOG_LEVEL: DEBUG
      NODE_ENV: << parameters.node_env >>
    steps:
      - when: 
          <<: *has_aws_changes
          steps:
          - checkout
          - run:
              command: |
                . /home/circleci/.codebuild_shims_wrapper.sh
                cd .aws
                nvm install
                npm install
                [[ ${NODE_ENV} == "development" ]] && npm run prettier-check
                [[ ${NODE_ENV} == "development" ]] && npm run lint
                npm run synth
              name: install packages, lint, and create tf template
          - run:
              command: |
                cd .aws/cdktf.out/stacks/prefect-v2
                terraform init
                terraform plan
              name: terraform plan
      - no_op

  aws_changes_deploy:
    parameters:
      node_env:
        default: "development"
        type: string
      runner_resource_class:
        default: pocket/default-dev
        type: string
    machine: true
    resource_class: << parameters.runner_resource_class >>
    environment: 
      CDKTF_LOG_LEVEL: DEBUG
      NODE_ENV: << parameters.node_env >>
    steps:
      - when: 
          <<: *has_aws_changes
          steps:
            - checkout
            - run:
                command: |
                  . /home/circleci/.codebuild_shims_wrapper.sh
                  cd .aws
                  nvm install
                  npm install
                  npm run synth
                name: install packages and create tf template
            - run:
                command: |
                  cd .aws/cdktf.out/stacks/prefect-v2
                  terraform init
                  terraform apply -auto-approve
                name: terraform deploy
      - no_op
  common_utils_changes_build:
    docker:
      - image: prefecthq/prefect:2-python3.10
    steps:
      - when: 
          <<: *has_common_utils_changes
          steps:
            - git_checkout
            - install_poetry
            - python_changes_build
      - no_op
    working_directory: << pipeline.parameters.base_working_directory >>/common-utils
  prefect_project_changes:
    parameters:
      environment_type:
        default: dev
        type: string
      deployment_type:
        default: test
        type: string
      validate_build_only:
        default: true
        type: boolean
      use_deploy_cli:
        default: true
        type: boolean
      project_folder:
        type: string
      has_changes:
        default: false
        type: boolean
    environment: 
      PREFECT_ENVIRONMENT_TYPE: << parameters.environment_type >>
      PREFECT_DEPLOYMENT_TYPE: << parameters.deployment_type >>
    docker:
      - image: cimg/python:3.10
    steps:
      - when: 
          condition: << parameters.has_changes >>
          steps:
            - git_checkout
            - install_poetry
            - python_changes_build
            - common_utils_wheel_file
            - when:
                condition: << parameters.use_deploy_cli >>
                steps:
                  - setup_remote_docker:
                      version: 20.10.18
                  - when:
                      condition: << parameters.validate_build_only >>
                      steps:
                        - prefect_project_build
                  - unless:
                      condition: << parameters.validate_build_only >>
                      steps:
                        - prefect_project_deploy
      - no_op
    working_directory: << pipeline.parameters.base_working_directory >>/<< parameters.project_folder >>
  prefect_agent_docker:
    parameters:
        push_image:
          default: false
          type: boolean
    docker:
      - image: cimg/aws:2023.04
    steps:
      - when: 
          <<: *has_agent_docker_changes
          steps:
            - git_checkout
            - aws-cli/setup:
                role-arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/data-flows-circleci-oidc-role"
                role-session-name: prefect-agent-docker-image
            - setup_remote_docker:
                version: 20.10.18
            - run:
                command: |
                  docker build --platform linux/amd64 -t prefect-agent -f agent/Dockerfile .
            - when:
                condition: << parameters.push_image >>
                steps:
                  - run:
                      command: |
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        IMAGE_TAG=${CIRCLE_SHA1:0:7}
                        docker tag prefect-agent:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/data-flows-prefect-envs:prefect-agent-${IMAGE_TAG}
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/data-flows-prefect-envs:prefect-agent-${IMAGE_TAG}
      - no_op
    working_directory: << pipeline.parameters.base_working_directory >>/.aws/.docker

workflows:
  aws_changes_pr_workflow:
    jobs: 
      - prefect_agent_docker:
          <<: *not_dev_main_v2
          context: pocket-oidc-dev
          name: prefect agent docker build
      - aws_changes_build:
          <<: *not_dev_main_v2
          context: pocket
          node_env: development
          runner_resource_class: pocket/default-dev
          name: terraform plan dev
      - aws_changes_build:
          <<: *not_dev_main_v2
          context: pocket
          node_env: production
          runner_resource_class: pocket/default-prod
          name: terraform plan production
  aws_changes_dev_workflow:
    jobs: 
      - prefect_agent_docker:
          <<: *only_dev_v2
          context: pocket-oidc-dev
          push_image: true
          name: prefect agent docker push
      - aws_changes_deploy:
          <<: *only_dev_v2
          context: pocket
          node_env: development
          runner_resource_class: pocket/default-dev
          name: terraform apply dev
          requires:
            - prefect agent docker push
  aws_changes_main_workflow:
    jobs: 
      - prefect_agent_docker:
          <<: *only_main_v2
          context: pocket-oidc-prod
          push_image: true
          name: prefect agent docker push
      - aws_changes_deploy:
          <<: *only_main_v2
          context: pocket
          node_env: production
          runner_resource_class: pocket/default-prod
          name: terraform apply production
          requires:
            - prefect agent docker push
  prefect_changes_pr_workflow:
    jobs:
      - common_utils_changes_build:
          <<: *not_dev_main_v2
      - prefect_project_changes:
          <<: *not_dev_main_v2
          context: pocket-prefect-dev
          use_deploy_cli: false
          has_changes: << pipeline.parameters.data_products_changes  >>
          project_folder: data-products
          requires:
            - common_utils_changes_build
  prefect_changes_dev_workflow:
    jobs:
      - common_utils_changes_build:
          <<: *only_dev_v2
      - prefect_project_changes:
          <<: *only_dev_v2
          context: 
            - pocket-prefect-prod
            - pocket-oidc-prod
          has_changes: << pipeline.parameters.data_products_changes  >>
          project_folder: data-products
          environment_type: production
          requires:
            - common_utils_changes_build
  prefect_changes_main_workflow:
    jobs:
      - common_utils_changes_build:
          <<: *only_main_v2
      - prefect_project_changes:
          <<: *only_main_v2
          context: 
            - pocket-prefect-prod
            - pocket-oidc-prod
          has_changes: << pipeline.parameters.data_products_changes  >>
          project_folder: data-products
          deployment_type: live
          environment_type: production
          requires:
            - common_utils_changes_build

# VS Code Extension Version: 1.5.1